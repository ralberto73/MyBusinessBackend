@model MyBusiness.Models.ServiceOrder

<style>
    * {
        box-sizing: border-box;
    }

    body {
        background-color: #f1f1f1;
    }

    #regForm {
        background-color: #ffffff;
        margin: 100px auto;
        font-family: Raleway;
        padding: 40px;
        width: 70%;
        min-width: 300px;
    }

    h1 {
        text-align: center;
    }

    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        font-family: Raleway;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    button {
        background-color: #4CAF50;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 17px;
        font-family: Raleway;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    #prevBtn {
        background-color: #bbbbbb;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }
</style>



<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <h1>New Service</h1>
            <!-- One "tab" for each step in the form: -->
            <div class="tab">
                <div class="form-group">
                    <label asp-for="Contact" class="control-label"></label>
                    <input asp-for="Contact" class="form-control" autocomplete="off" validations="Required" />
                    <span asp-validation-for="Contact" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="PhoneNumber" class="control-label"></label>
                    <input asp-for="PhoneNumber" class="form-control" autocomplete="off" />
                    <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Email" class="control-label"></label>
                    <input asp-for="Email" class="form-control" autocomplete="off" />
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>
            </div>
            <div class="tab">
                <div class="form-group">
                    <label asp-for="Year" class="control-label"></label>
                    <select asp-for="Year" asp-items="@((List<SelectListItem>)ViewData["YearList"])" class="form-control">
                    </select>
                </div>
                <div class="form-group">
                    <label asp-for="ProductId" class="control-label"></label>
                    <select asp-items="@((List<SelectListItem>)ViewData["ProductList"])" class="form-control">
                        <option value="">Pick one</option>
                    </select>
                    <span asp-validation-for="ProductId" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="BrandId" class="control-label"></label>
                    <select asp-for="BrandId" asp-items="@((List<SelectListItem>)ViewData["BrandList"])" class="form-control">
                        <option value="">Pick one</option>
                    </select>
                    <span asp-validation-for="BrandId" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Model" class="control-label"></label>
                    <input asp-for="Model" class="form-control" autocomplete="off" />
                    <span asp-validation-for="Model" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="SubModel" class="control-label"></label>
                    <input asp-for="SubModel" class="form-control" autocomplete="off" />
                    <span asp-validation-for="SubModel" class="text-danger"></span>
                </div>


            </div>
            <div class="tab">
                <div class="form-group">
                    <label asp-for="AddressLine1" class="control-label"></label>
                    <input asp-for="AddressLine1" class="form-control" autocomplete="off" />
                    <span asp-validation-for="AddressLine1" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="AddressLine2" class="control-label"></label>
                    <input asp-for="AddressLine2" class="form-control" autocomplete="off" />
                    <span asp-validation-for="AddressLine2" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="City" class="control-label"></label>
                    <input asp-for="City" class="form-control" autocomplete="off" />
                    <span asp-validation-for="City" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="State" class="control-label"></label>
                    <input asp-for="State" class="form-control" autocomplete="off" />
                    <span asp-validation-for="State" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="ZipCode" class="control-label"></label>
                    <input asp-for="ZipCode" class="form-control" autocomplete="off" />
                    <span asp-validation-for="ZipCode" class="text-danger"></span>
                </div>
            </div>
            <div class="tab">
                Billing Info:
                <div class="form-group">
                    <label asp-for="BillableAmount" class="control-label"></label>
                    <input asp-for="BillableAmount" class="form-control" autocomplete="off" />
                    <span asp-validation-for="BillableAmount" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="LaborAmount" class="control-label"></label>
                    <input asp-for="LaborAmount" class="form-control" autocomplete="off" />
                    <span asp-validation-for="LaborAmount" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="PartCost" class="control-label"></label>
                    <input asp-for="PartCost" class="form-control" autocomplete="off" />
                    <span asp-validation-for="PartCost" class="text-danger"></span>
                </div>
            </div>
            <div class="tab">
                <div class="form-group">
                    <label asp-for="PaymentMethod" class="control-label"></label>
                    <select asp-for="PaymentMethod" asp-items="@((List<SelectListItem>)ViewData["PaymentMethodList"])" class="form-control">
                    </select>
                </div>
                <div class="form-group">
                    <label asp-for="InsuranceId" class="control-label"></label>
                    <select asp-for="InsuranceId" asp-items="@((List<SelectListItem>)ViewData["InsuranceList"])" class="form-control">
                        <option value="">Pick one</option>
                    </select>
                </div>

                <div class="form-group">
                    <label asp-for="SupplierId" class="control-label"></label>
                    <select asp-for="SupplierId" asp-items="@((List<SelectListItem>)ViewData["SupplierList"])" class="form-control">
                        <option value="">Pick one</option>
                    </select>
                </div>


            </div>
                <div style="overflow:auto;">
                    <div style="float:right;">

                        <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                        <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
                        <input type="submit" value="Create" />

                    </div>
                </div>

                <div class="form-group">
                </div>
                <!-- Circles which indicates the steps of the form: -->
                <div style="text-align:center;margin-top:40px;">
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>
                    <span class="step"></span>

                </div>
</form>
    </div>
</div>
<script>
            var currentTab = 0; // Current tab is set to be the first tab (0)
            showTab(currentTab); // Display the current tab

            function showTab(n) {
                // This function will display the specified tab of the form...
                var x = document.getElementsByClassName("tab");
                x[n].style.display = "block";
                //... and fix the Previous/Next buttons:
                if (n == 0) {
                    document.getElementById("prevBtn").style.display = "none";
                } else {
                    document.getElementById("prevBtn").style.display = "inline";
                }
                if (n == (x.length - 1)) {
                    document.getElementById("nextBtn").innerHTML = "Submit";
                } else {
                    document.getElementById("nextBtn").innerHTML = "Next";
                }
                //... and run a function that will display the correct step indicator:
                fixStepIndicator(n)
            }

            function nextPrev(n) {
                // This function will figure out which tab to display
                var x = document.getElementsByClassName("tab");
                // Exit the function if any field in the current tab is invalid:
                if (n == 1 && !validateForm()) return false;
                // Hide the current tab:
                x[currentTab].style.display = "none";
                // Increase or decrease the current tab by 1:
                currentTab = currentTab + n;
                // if you have reached the end of the form...
                if (currentTab >= x.length) {
                    // ... the form gets submitted:
                    document.getElementById("regForm").submit();
                    return false;
                }
                // Otherwise, display the correct tab:
                showTab(currentTab);
            }

            function validateForm() {
                return true;
                // This function deals with validation of the form fields
                var x, y, i, valid = true;
                x = document.getElementsByClassName("tab");
                y = x[currentTab].getElementsByTagName("input");
                // A loop that checks every input field in the current tab:
                for (i = 0; i < y.length; i++) {
                    // If a field is empty...
                    if (y[i].value == "") {
                        // add an "invalid" class to the field:
                        y[i].className += " invalid";
                        // and set the current valid status to false
                        valid = false;
                    }
                }
                // If the valid status is true, mark the step as finished and valid:
                if (valid) {
                    document.getElementsByClassName("step")[currentTab].className += " finish";
                }
                return valid; // return the valid status
            }

            function fixStepIndicator(n) {
                // This function removes the "active" class of all steps...
                var i, x = document.getElementsByClassName("step");
                for (i = 0; i < x.length; i++) {
                    x[i].className = x[i].className.replace(" active", "");
                }
                //... and adds the "active" class on the current step:
                x[n].className += " active";
            }

            function Validate(option, value)
            {
                //var validator['Required'] = { (x) => x != "") };
                switch (option) {
                    case "Required": return value != "";
                   
                }
            }

          /*  function IsValid(options, value)
            {
                var result = true;
                //  Put all validators into array
                var allValidators = options.split(",");
                //if (result == true) {
                //}


                //}
                return result
            }

            function IsValid(option, value) {
                switch (options) {
                    case "Required": result = value != "";
            }*/
</script>

        <!-- https://getbootstrap.com/docs/4.5/components/pagination/ -->
        <!-- https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_form_steps -->
